# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, simpledialog
import os, sys, json, subprocess, threading, shutil, difflib, re, importlib.util
from datetime import datetime
import socket
from PIL import Image, ImageTk, ImageGrab
from dotenv import load_dotenv
import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import pymongo  # Pro MongoDB historii
import pyautogui  # Virtuální myš/klávesnice
import cv2  # Pro stream screenshotů
import websocket  # Pro komunikaci s Java
from google.cloud import texttospeech as tts  # TTS
from google.cloud import speech as stt  # STT

# Knihovny pro pokročilé funkce
try:
    import psutil
except ImportError:
    psutil = None
try:
    import mss
except ImportError:
    mss = None

load_dotenv()

# --- Globální konstanty ---
BG_COLOR = '#1e1e1e'
PANEL_BG = '#2d2d2d'
ACCENT_COLOR = '#00ffff'
FONT_FAMILY = "Consolas"
SETTINGS_FILE = 'settings.json'
MEMORY_DIR = 'memory'
HISTORY_FILE = os.path.join(MEMORY_DIR, 'box_history.json')  # Záloha, ale primárně MongoDB
MONGO_URI = "mongodb://localhost:27017/"  # Nahraďte svým URI
DB_NAME = "codebox_db"
CHAT_COLLECTION = "chat_history"
PAMET_COLLECTION = "gemini_pamet"  # Pro paměť Gemini
JAVA_JAR_PATH = "dispecink.jar"  # Cesta k Java JAR

# Ikony
MIC_ICON_PATH = 'icons/mic.png'
SPEAKER_ICON_PATH = 'icons/speaker.png'
BANNER_IMAGE_PATH = 'icons/banner.png'  # Placeholder pro banner

# Inicializace MongoDB
mongo_client = pymongo.MongoClient(MONGO_URI)
db = mongo_client[DB_NAME]
chat_col = db[CHAT_COLLECTION]
pamet_col = db[PAMET_COLLECTION]

# Inicializace TTS/STT
tts_client = tts.TextToSpeechClient()
stt_client = stt.SpeechClient()

# Inicializace Gemini
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
code_model = genai.GenerativeModel('gemini-2.5-flash')

# Systémový prompt s pamětí
system_prompt = """
Jsi 'Gemi-Boss'... (původní prompt) + Pracuj s pamětí: Načti paměť z MongoDB, kombinuj s manifestem.
Dostupné příkazy rozšířeny o Java: {"command": "java_call", "method": "<java_method>", "args": "<args>"} 
Pro virtuální myš/klávesnice: {"command": "simulate_input", "type": "mouse/keyboard", "action": "<action>"} 
Pro stream screenshot: {"command": "stream_screenshot", "mode": "window/full", "duration": <sec>}
Pro TTS: {"command": "tts", "text": "<text>"}
Pro STT: {"command": "stt", "audio_path": "<path>"} 
"""

# --- Rozšířené třídy ---
class SimpleMessage:
    def __init__(self, agent_id, content, direction, msg_type="chat", msg_id=None, metadata=None):
        self.agent_id, self.content, self.direction = agent_id, content, direction
        self.timestamp, self.msg_id = datetime.now().isoformat(), msg_id
        self.metadata = metadata or {}
        self.metadata['type'] = msg_type
    def to_json(self): return json.dumps(self.__dict__, ensure_ascii=False)
    @classmethod
    def from_json(cls, json_str):
        data = json.loads(json_str)
        instance = cls(data.get('agent_id'), data.get('content'), data.get('direction'))
        instance.__dict__.update(data)
        return instance

class WsClient:
    def __init__(self, url="ws://localhost:8080/ws-chat"):
        self.ws = None
        self.url = url
        self.connected = False
        self.callbacks = []

    def connect(self):
        def on_open(ws):
            self.connected = True
        def on_message(ws, message):
            for callback in self.callbacks:
                callback(json.loads(message))
        def on_error(ws, error):
            print(f"WS Error: {error}")
        def on_close(ws):
            self.connected = False

        self.ws = websocket.WebSocketApp(self.url, on_open=on_open, on_message=on_message, on_error=on_error, on_close=on_close)
        threading.Thread(target=self.ws.run_forever).start()

    def send_message(self, msg):
        if self.connected:
            self.ws.send(json.dumps(msg))

    def add_callback(self, callback):
        self.callbacks.append(callback)

class TextLineNumbers(tk.Canvas):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.textwidget = None
    def attach(self, text_widget):
        self.textwidget = text_widget
        self.redraw()
    def redraw(self, *args):
        self.delete("all")
        if not self.textwidget: return
        try:
            i = self.textwidget.index("@0,0")
            while True:
                dline = self.textwidget.dlineinfo(i)
                if dline is None: break
                y = dline[1]
                linenum = str(i).split(".")[0]
                self.create_text(2, y, anchor="nw", text=linenum, fill="#6c757d")
                i = self.textwidget.index(f"{i}+1line")
        except:
            pass

class CustomText(tk.Text):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._orig = self._w + "_orig"
        self.tk.call("rename", self._w, self._orig)
        self.tk.createcommand(self._w, self._proxy)
    def _proxy(self, *args):
        try:
            cmd = (self._orig,) + args
            result = self.tk.call(cmd)
            if (args[0] in ("insert", "delete", "replace") or 
                args[0:3] == ("mark", "set", "insert") or 
                args[0:2] == ("xview", "scroll") or 
                args[0:2] == ("yview", "scroll")):
                self.event_generate("<<Change>>", when="tail")
            return result
        except:
            return None

class FilesPanel:
    def __init__(self, parent_app, parent_frame, callback=None):
        self.app = parent_app
        self.callback = callback
        self.current_dir = os.getcwd()
        self.frame = ttk.Frame(parent_frame)
        
        toolbar = ttk.Frame(self.frame)
        toolbar.pack(fill="x", padx=5, pady=2)
        
        buttons = {"🏠": "Domů", "↑": "Nahoru", "🔄": "Obnovit", "➕📁": "Nová složka", 
                  "➕📄": "Nový soubor", "✂️": "Kopírovat", "❌": "Smazat"}
        commands = [self.go_home, self.go_up, self.refresh, self.new_folder, 
                   self.new_file, self.copy_item, self.delete_item]
        
        for (icon, tooltip), command in zip(buttons.items(), commands):
            btn = ttk.Button(toolbar, text=icon, command=command, width=3)
            btn.pack(side="left")
            self.create_tooltip(btn, tooltip)
            
        self.paste_button = ttk.Button(toolbar, text="📋", command=self.paste_item, width=3, state="disabled")
        self.paste_button.pack(side="left")
        self.create_tooltip(self.paste_button, "Vložit")
        
        self.dir_label = ttk.Label(self.frame, text=self.current_dir, foreground=ACCENT_COLOR)
        self.dir_label.pack(fill="x", padx=5, pady=(0,5))
        
        tree_frame = ttk.Frame(self.frame)
        tree_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        self.tree = ttk.Treeview(tree_frame, columns=("modified", "size"), height=15)
        self.tree.pack(side="left", fill="both", expand=True)
        
        self.tree.heading("#0", text="Název")
        self.tree.heading("modified", text="Datum změny")
        self.tree.heading("size", text="Velikost")
        
        self.tree.column("#0", stretch=tk.YES, minwidth=150)
        self.tree.column("modified", width=120, anchor='center')
        self.tree.column("size", width=80, anchor='e')
        
        self.tree.tag_configure('folder', foreground='#77b3d1')
        self.tree.tag_configure('code', foreground='#c586c0')
        self.tree.tag_configure('image', foreground='#d1a077')
        self.tree.tag_configure('system', font=(FONT_FAMILY, 10, 'bold'))
        
        sb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=sb.set)
        sb.pack(side="right", fill="y")
        
        self.tree.bind("<Double-Button-1>", self.on_double_click)
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.tree.bind("<F2>", self.rename_item_event)
        self.refresh()
        
    def create_tooltip(self, widget, text):
        tooltip = Tooltip(widget, text)
        widget.bind("<Enter>", lambda e: tooltip.showtip())
        widget.bind("<Leave>", lambda e: tooltip.hidetip())

    def show_context_menu(self, event):
        try:
            item_id = self.tree.identify_row(event.y)
            if not item_id: return
            self.tree.selection_set(item_id)
            
            menu = tk.Menu(self.frame, tearoff=0, bg=PANEL_BG, fg=ACCENT_COLOR)
            menu.add_command(label="Otevřít", command=lambda: self.on_double_click(None))
            menu.add_command(label="Přejmenovat (F2)", command=self.rename_item)
            menu.add_command(label="Zálohuj a Edituj", command=self.backup_and_edit)
            menu.add_separator()
            menu.add_command(label="📎 Kopírovat cestu", command=self.copy_path)
            menu.add_command(label="📄 Kopírovat obsah", command=self.copy_content)
            menu.add_separator()
            
            new_file_menu = tk.Menu(menu, tearoff=0, bg=PANEL_BG, fg=ACCENT_COLOR)
            new_file_menu.add_command(label="Python soubor (.py)", command=lambda: self.new_file(ext=".py"))
            new_file_menu.add_command(label="Textový soubor (.txt)", command=lambda: self.new_file(ext=".txt"))
            new_file_menu.add_command(label="JSON soubor (.json)", command=lambda: self.new_file(ext=".json"))
            menu.add_cascade(label="Nový soubor", menu=new_file_menu)
            menu.add_separator()
            menu.add_command(label="❌ Smazat", command=self.delete_item)
            
            menu.post(event.x_root, event.y_root)
        except Exception as e:
            print(f"Chyba context menu: {e}")
            
    def backup_and_edit(self):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            item_path = os.path.join(self.current_dir, item_text)
            
            if os.path.isfile(item_path):
                shutil.copyfile(item_path, item_path + '.bak')
                self.app._update_status_banner(f"Vytvořena záloha: {os.path.basename(item_path)}.bak")
                if self.callback:
                    self.callback(item_path)
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při zálohování: {e}")
            
    def rename_item_event(self, event): 
        self.rename_item()
        
    def rename_item(self):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            item_path = os.path.join(self.current_dir, item_text)
            old_name = os.path.basename(item_path)
            
            new_name = simpledialog.askstring("Přejmenovat", f"Nový název pro '{old_name}':", initialvalue=old_name)
            if new_name and new_name != old_name:
                new_path = os.path.join(os.path.dirname(item_path), new_name)
                os.rename(item_path, new_path)
                self.app._update_status_banner(f"✅ Přejmenováno na '{new_name}'")
                self.refresh()
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při přejmenování: {e}")
            
    def copy_path(self):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            item_path = os.path.join(self.current_dir, item_text)
            
            self.app.root.clipboard_clear()
            self.app.root.clipboard_append(item_path)
            self.app._update_status_banner(f"📋 Cesta zkopírována do schránky.")
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při kopírování cesty: {e}")
            
    def copy_content(self):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            item_path = os.path.join(self.current_dir, item_text)
            
            if os.path.isfile(item_path):
                with open(item_path, 'r', encoding='utf-8', errors='ignore') as f: 
                    content = f.read()
                self.app.root.clipboard_clear()
                self.app.root.clipboard_append(content)
                self.app._update_status_banner(f"📋 Obsah souboru zkopírován.")
            else:
                self.app._update_status_banner(f"Nelze kopírovat obsah složky.")
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při čtení souboru: {e}")
            
    def go_home(self):
        try:
            project_root = os.path.dirname(os.path.abspath(sys.argv[0]))
            self.refresh(project_root)
            main_script_path = os.path.join(project_root, 'ai_codebox_app.py')
            if os.path.exists(main_script_path) and self.callback: 
                self.callback(main_script_path)
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při přechodu domů: {e}")
            
    def go_up(self):
        parent_dir = os.path.dirname(self.current_dir)
        if parent_dir != self.current_dir:
            self.refresh(parent_dir)
            
    def refresh(self, path=None):
        if path:
            self.current_dir = path
            self.dir_label.config(text=self.current_dir)
        
        self.tree.delete(*self.tree.get_children())
        
        try:
            for item in os.listdir(self.current_dir):
                full_path = os.path.join(self.current_dir, item)
                modified = datetime.fromtimestamp(os.path.getmtime(full_path)).strftime("%Y-%m-%d %H:%M")
                size = ""
                tag = ''
                
                if os.path.isdir(full_path):
                    tag = 'folder'
                    size = '<dir>'
                else:
                    size = f"{os.path.getsize(full_path) / 1024:.1f} KB"
                    ext = os.path.splitext(item)[1].lower()
                    if ext in ('.py', '.java', '.cpp', '.cs', '.js'):
                        tag = 'code'
                    elif ext in ('.png', '.jpg', '.gif'):
                        tag = 'image'
                    elif item.startswith('.'):
                        tag = 'system'
                
                self.tree.insert("", "end", text=item, values=(modified, size), tags=(tag,))
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při načítání adresáře: {e}")
            
    def new_folder(self):
        try:
            name = simpledialog.askstring("Nová složka", "Zadej název složky:", initialvalue="Nová složka")
            if name:
                os.makedirs(os.path.join(self.current_dir, name), exist_ok=True)
                self.app._update_status_banner(f"📁 Vytvořena složka '{name}'")
                self.refresh()
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při vytváření složky: {e}")
            
    def new_file(self, ext=".txt"):
        try:
            name = simpledialog.askstring("Nový soubor", f"Zadej název souboru (např. 'file{ext}'):", initialvalue=f"Nový soubor{ext}")
            if name:
                with open(os.path.join(self.current_dir, name), 'w', encoding='utf-8') as f:
                    pass
                self.app._update_status_banner(f"📄 Vytvořen soubor '{name}'")
                self.refresh()
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při vytváření souboru: {e}")
            
    def copy_item(self):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            self.clipboard_path = os.path.join(self.current_dir, item_text)
            self.paste_button.config(state="normal")
            self.app._update_status_banner(f"📋 Připraveno ke kopírování: '{item_text}'")
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při kopírování: {e}")
            
    def paste_item(self):
        try:
            if hasattr(self, 'clipboard_path'):
                src = self.clipboard_path
                dest = os.path.join(self.current_dir, os.path.basename(src))
                if os.path.exists(dest):
                    dest = dest + "_copy"
                if os.path.isdir(src):
                    shutil.copytree(src, dest)
                else:
                    shutil.copy2(src, dest)
                self.app._update_status_banner(f"✅ Vložen: '{os.path.basename(dest)}'")
                self.refresh()
                self.paste_button.config(state="disabled")
                del self.clipboard_path
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při vkládání: {e}")
            
    def delete_item(self):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            item_path = os.path.join(self.current_dir, item_text)
            
            if messagebox.askyesno("Potvrzení", f"Skutečně smazat '{item_text}'?"):
                if os.path.isdir(item_path):
                    shutil.rmtree(item_path)
                else:
                    os.remove(item_path)
                self.app._update_status_banner(f"❌ Smazáno: '{item_text}'")
                self.refresh()
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při mazání: {e}")
            
    def on_double_click(self, event):
        try:
            selected_item = self.tree.selection()
            if not selected_item: return
            
            item_text = self.tree.item(selected_item[0])['text'].strip().split(' ', 2)[-1]
            item_path = os.path.join(self.current_dir, item_text)
            
            if os.path.isdir(item_path):
                self.refresh(item_path)
            elif self.callback:
                self.callback(item_path)
        except Exception as e:
            self.app._update_status_banner(f"❌ Chyba při otevírání: {e}")

class AiCodeBoxApp:
    def __init__(self, root):
        self.root = root
        self.root.title("AI CodeBox")
        self.root.configure(bg=BG_COLOR)
        self.root.geometry("1200x800")
        self.live_mode_enabled = tk.BooleanVar(value=False)

        # Banner na vrchu
        self.banner_frame = ttk.Frame(self.root, height=50, style="Banner.TFrame")
        self.banner_frame.pack(fill="x")
        try:
            banner_img = Image.open(BANNER_IMAGE_PATH)
            banner_img = banner_img.resize((1200, 50), Image.Resampling.LANCZOS)
            self.banner_photo = ImageTk.PhotoImage(banner_img)
            self.banner_label = ttk.Label(self.banner_frame, image=self.banner_photo)
            self.banner_label.pack()
        except Exception as e:
            print(f"Chyba načtení banneru: {e}")
            ttk.Label(self.banner_frame, text="AI CodeBox Banner", background=ACCENT_COLOR, foreground=BG_COLOR).pack(fill="x")

        # Hlavní rozložení s PanedWindow
        main_pane = ttk.PanedWindow(self.root, orient="horizontal")
        main_pane.pack(fill="both", expand=True)

        # Levý panel: FilesPanel
        self.files_frame = ttk.Frame(main_pane, width=300, padding=5)
        self.files_panel = FilesPanel(self, self.files_frame, callback=self.open_file_in_viewer)
        main_pane.add(self.files_frame, weight=1)

        # Střední panel: Tři okna v PanedWindow
        center_pane = ttk.PanedWindow(main_pane, orient="vertical")
        main_pane.add(center_pane, weight=3)

        # Team View (nahoře)
        self.team_frame = ttk.Frame(center_pane)
        self.team_chat = scrolledtext.ScrolledText(self.team_frame, bg=PANEL_BG, fg=ACCENT_COLOR, font=(FONT_FAMILY, 10), height=10)
        self.team_chat.pack(fill="both", expand=True, padx=5, pady=5)
        team_input_frame = ttk.Frame(self.team_frame)
        team_input_frame.pack(fill="x", padx=5, pady=2)
        self.team_input = ttk.Entry(team_input_frame)
        self.team_input.pack(side="left", fill="x", expand=True)
        ttk.Button(team_input_frame, text="Odeslat", command=self.send_team_message).pack(side="right")
        center_pane.add(self.team_frame, weight=1)

        # Code Viewer (střed)
        self.code_viewer_frame = ttk.Frame(center_pane)
        self.linenumbers = TextLineNumbers(self.code_viewer_frame, width=30, bg=PANEL_BG, highlightthickness=0)
        self.file_text = CustomText(self.code_viewer_frame, bg=PANEL_BG, fg=ACCENT_COLOR, font=(FONT_FAMILY, 10), wrap="none", undo=True)
        self.linenumbers.attach(self.file_text)
        self.image_label = ttk.Label(self.code_viewer_frame)
        self.current_file_label = ttk.Label(self.code_viewer_frame, text="📄 Žádný soubor", foreground=ACCENT_COLOR)
        code_toolbar = ttk.Frame(self.code_viewer_frame)
        ttk.Button(code_toolbar, text="Edit", command=self.edit_file).pack(side="left", padx=2)
        ttk.Button(code_toolbar, text="Backup", command=self.backup_file).pack(side="left", padx=2)
        code_toolbar.pack(fill="x", pady=2)
        self.current_file_label.pack(fill="x")
        self.file_text.pack(fill="both", expand=True)
        center_pane.add(self.code_viewer_frame, weight=2)

        # API View (spodek)
        self.api_frame = ttk.Frame(center_pane)
        self.api_chat = scrolledtext.ScrolledText(self.api_frame, bg=PANEL_BG, fg=ACCENT_COLOR, font=(FONT_FAMILY, 10), height=10)
        self.api_chat.pack(fill="both", expand=True, padx=5, pady=5)
        self.api_chat.tag_config("user", justify="left", background="#333333", foreground="#ffffff")
        self.api_chat.tag_config("ai", justify="right", background="#444444", foreground="#00ffff")
        api_input_frame = ttk.Frame(self.api_frame)
        api_input_frame.pack(fill="x", padx=5, pady=2)
        self.user_input = ttk.Entry(api_input_frame)
        self.user_input.pack(side="left", fill="x", expand=True)
        self.send_button = ttk.Button(api_input_frame, text="Odeslat", command=self.send_message)
        self.send_button.pack(side="right", padx=2)
        self.mic_button = ttk.Button(api_input_frame, image=ImageTk.PhotoImage(file=MIC_ICON_PATH), command=self.toggle_recording)
        self.mic_button.pack(side="right", padx=2)
        center_pane.add(self.api_frame, weight=1)

        # Pravý panel: Stavový panel
        self.status_frame = ttk.Frame(main_pane, width=200, padding=5)
        self.status_label = ttk.Label(self.status_frame, text="Stav systému\nmanager: Offline\napi: Offline\njava: Offline", foreground=ACCENT_COLOR, justify="left")
        self.status_label.pack(fill="both", pady=5)
        status_buttons = ttk.Frame(self.status_frame)
        ttk.Button(status_buttons, text="Ladění", command=self.toggle_debugging_mode).pack(side="top", pady=2)
        ttk.Button(status_buttons, text="Test", command=self.launch_test_mode).pack(side="top", pady=2)
        ttk.Button(status_buttons, text="Restart", command=self.restart_app).pack(side="top", pady=2)
        ttk.Button(status_buttons, text="Vypnout", command=self.shutdown_app).pack(side="top", pady=2)
        status_buttons.pack(fill="y")
        self.status_indicator = ttk.Label(self.status_frame, text="🟥 Neaktivní", foreground="#ff5555")
        self.status_indicator.pack(side="bottom", pady=5)
        main_pane.add(self.status_frame, weight=1)

        # Status banner
        self.status_banner = ttk.Label(self.root, text="AI CodeBox připraven", background=BG_COLOR, foreground=ACCENT_COLOR)
        self.status_banner.pack(side="bottom", fill="x")

        # Live mode button
        self.live_mode_button = ttk.Button(self.root, text="▶️ Zapnout Live Režim", command=self.toggle_live_mode)
        self.live_mode_button.pack(side="bottom", pady=2)

        # Inicializace WebSocket
        self.ws_client = WsClient()
        self.ws_client.connect()
        self.ws_client.add_callback(self.on_ws_message)

        # Načtení ikon
        self.mic_photo = ImageTk.PhotoImage(file=MIC_ICON_PATH)
        self.speaker_photo = ImageTk.PhotoImage(file=SPEAKER_ICON_PATH)

    def create_tooltip(self, widget, text):
        tooltip = Tooltip(widget, text)
        widget.bind("<Enter>", lambda e: tooltip.showtip())
        widget.bind("<Leave>", lambda e: tooltip.hidetip())

    def toggle_recording(self):
        pass  # Placeholder pro nahrávání (doplnit STT logiku)

    def toggle_tts(self):
        pass  # Placeholder pro TTS

    def _generate_gemini_response(self, prompt):
        try:
            full_prompt = system_prompt + self.get_chat_history_from_mongo() + "\nPaměť: " + json.dumps(list(pamet_col.find())) + "\n" + prompt
            response = code_model.generate_content(full_prompt).text
            msg = SimpleMessage("gemi", response, "received", msg_id=f"gemi-{datetime.now().strftime('%d%m-%H%M')}-0")
            chat_col.insert_one(msg.__dict__)
            self.ws_client.send_message(msg.__dict__)
            self._display("AI", response, self.api_chat, "ai")
        except Exception as e:
            self._update_status_banner(f"❌ Chyba API: {e}")

    def send_team_message(self):
        prompt = self.team_input.get()
        if prompt:
            self._display("User", prompt, self.team_chat)
            threading.Thread(target=self._generate_gemini_response, args=(prompt,)).start()
            self.team_input.delete(0, tk.END)

    def send_message(self, event=None):
        prompt = self.user_input.get()
        if prompt:
            self._display("User", prompt, self.api_chat, "user")
            threading.Thread(target=self._generate_gemini_response, args=(prompt,)).start()
            self.user_input.delete(0, tk.END)

    def _display(self, sender, message, chat_widget, tag=None):
        chat_widget.config(state="normal")
        chat_widget.insert("end", f"{sender}: {message}\n", tag)
        chat_widget.config(state="disabled")
        chat_widget.see("end")

    def get_chat_history_from_mongo(self):
        history = list(chat_col.find().sort("timestamp", -1).limit(5))
        return "\n".join([f"{msg['msg_id']}: {msg['content']}" for msg in history])

    def open_file_in_viewer(self, path):
        ext = os.path.splitext(path)[1].lower()
        if ext in ('.png', '.jpg', '.gif'):
            self.show_image_in_viewer(path)
        else:
            self.show_text_in_viewer(path)

    def show_text_in_viewer(self, path):
        for widget in self.code_viewer_frame.winfo_children():
            widget.pack_forget()
        self.linenumbers.pack(side="left", fill="y")
        self.file_text.pack(side="left", fill="both", expand=True)
        self.current_file_label.pack(fill="x")
        
        self.file_text.config(state="normal")
        self.file_text.delete("1.0", "end")
        with open(path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            self.file_text.insert("1.0", content)
        self.file_text.config(state="disabled")
        self.current_file_path = path
        self.current_file_label.config(text=f"📄 {os.path.basename(path)}")
        self.linenumbers.redraw()

    def show_image_in_viewer(self, path):
        for widget in self.code_viewer_frame.winfo_children():
            widget.pack_forget()
        img = Image.open(path)
        img = img.resize((self.code_viewer_frame.winfo_width(), self.code_viewer_frame.winfo_height()), Image.Resampling.LANCIOS)
        photo = ImageTk.PhotoImage(img)
        self.image_label.config(image=photo)
        self.image_label.image = photo
        self.image_label.pack(fill="both", expand=True)
        self.current_file_path = path
        self.current_file_label.config(text=f"🖼️ {os.path.basename(path)}")

    def edit_file(self):
        if hasattr(self, 'current_file_path') and self.current_file_path:
            self.file_text.config(state="normal")
            self._update_status_banner(f"📝 Soubor '{os.path.basename(self.current_file_path)}' je v režimu úpravy.")

    def backup_file(self):
        if hasattr(self, 'current_file_path') and self.current_file_path:
            backup_path = self.current_file_path + '.bak'
            shutil.copyfile(self.current_file_path, backup_path)
            self._update_status_banner(f"✅ Záloha vytvořena: '{os.path.basename(backup_path)}'")

    def toggle_debugging_mode(self):
        self._update_status_banner("🛠️ Ladění zapnuto" if not hasattr(self, 'debug_mode') or not self.debug_mode else "🛠️ Ladění vypnuto")
        self.debug_mode = not getattr(self, 'debug_mode', False)

    def launch_test_mode(self):
        self._update_status_banner("🎯 Testovací režim spuštěn")
        # Placeholder pro testovací logiku

    def restart_app(self):
        if messagebox.askyesno("Restart", "Skutečně restartovat aplikaci?"):
            self.root.quit()
            subprocess.Popen([sys.executable] + sys.argv)
            self._update_status_banner("🔄 Restartování aplikace...")

    def shutdown_app(self):
        if messagebox.askyesno("Vypnutí", "Skutečně ukončit aplikaci?"):
            self.root.quit()
            self._update_status_banner("❌ Aplikace ukončena.")

    def _update_status_banner(self, text):
        self.status_banner.config(text=text)

    def toggle_live_mode(self):
        self.live_mode_enabled.set(not self.live_mode_enabled.get())
        self._update_live_mode_button_style()
        self._update_status_indicator()

    def _update_live_mode_button_style(self):
        is_live = self.live_mode_enabled.get()
        self.live_mode_button.config(
            text="⏹️ Vypnout Live Režim" if is_live else "▶️ Zapnout Live Režim",
            style="Live.TButton" if is_live else "TButton"
        )

    def _update_status_indicator(self):
        status = "🟢 Aktivní" if self.live_mode_enabled.get() else "🟥 Neaktivní"
        self.status_indicator.config(text=status, foreground="#55ff55" if self.live_mode_enabled.get() else "#ff5555")

    def on_ws_message(self, message):
        if message.get('agent_id') == "java":
            self._update_status_banner(f"📡 Java: {message.get('content')}")

    def _stt_process(self, audio_path):
        with open(audio_path, "rb") as audio_file:
            audio_content = audio_file.read()
        config = stt.RecognitionConfig(
            encoding=stt.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=16000,
            language_code="cs-CZ"
        )
        response = stt_client.recognize(config=config, audio=stt.RecognitionAudio(content=audio_content))
        return response.results[0].alternatives[0].transcript if response.results else ""

    def _tts_play(self, text):
        synthesis_input = tts.SynthesisInput(text=text)
        voice = tts.VoiceSelectionParams(language_code="cs-CZ", ssml_gender=tts.SsmlVoiceGender.NEUTRAL)
        audio_config = tts.AudioConfig(audio_encoding=tts.AudioEncoding.MP3)
        response = tts_client.synthesize_speech(input=synthesis_input, voice=voice, audio_config=audio_config)
        with open("output.mp3", "wb") as out:
            out.write(response.audio_content)
        os.system("mpg123 output.mp3")

def main():
    root = tk.Tk()
    style = ttk.Style()
    style.configure("TButton", background=PANEL_BG, foreground=ACCENT_COLOR)
    style.configure("Live.TButton", background=ACCENT_COLOR, foreground=BG_COLOR)
    style.configure("Banner.TFrame", background=BG_COLOR)
    app = AiCodeBoxApp(root)
    root.mainloop()

class Tooltip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None

    def showtip(self):
        if self.tooltip_window or not self.text: return
        x, y, _, _ = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 25
        self.tooltip_window = tk.Toplevel(self.widget)
        self.tooltip_window.wm_overrideredirect(True)
        self.tooltip_window.wm_geometry(f"+{x}+{y}")
        label = tk.Label(self.tooltip_window, text=self.text, background="#ffffe0", relief="solid", borderwidth=1, font=(FONT_FAMILY, 10))
        label.pack()

    def hidetip(self):
        if self.tooltip_window:
            self.tooltip_window.destroy()
            self.tooltip_window = None

if __name__ == "__main__":
    main()
